const Ajv = require('ajv');
const ajv = new Ajv();

const schema = {
  type: "array",
    type: "object",
    properties: {
      userId: { type: "integer" },
      id: { type: "integer" },
      title: { type: "string" },
      body: { type: "string" }
    },
    required: ["userId", "id", "title", "body"]
};

const responseJson = pm.response.json();

const validate = ajv.compile(schema);
const valid = validate(responseJson);

pm.test("Check response schema is valid", function() {
  pm.expect(valid).to.be.true;

  if (!valid) {
    console.log(validate.errors); // Log validation errors if schema is invalid
  }
});

pm.test("Check status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Check status code name has string", function () {
    pm.response.to.have.status("OK");
});

pm.test("Check response time is less than 300ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(300);
});

pm.test("Check request headers", function () {
    pm.response.to.have.header("Content-Type");
});

pm.test("Check first object property values", function () {
    const expectedData = {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
};
    var jsonData = pm.response.json();
    pm.expect(jsonData.userId).to.eql(expectedData.userId);
    pm.expect(jsonData.id).to.eql(expectedData.id);
    pm.expect(jsonData.title).to.eql(expectedData.title);
    pm.expect(jsonData.body).to.eql(expectedData.body);
});