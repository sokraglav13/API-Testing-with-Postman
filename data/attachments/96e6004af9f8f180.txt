const Ajv = require('ajv');
const ajv = new Ajv();

const schema = {
    type: "object",
    properties: {
      id: { type: "integer" },
      name: { type: "string" },
      username: { type: "string" },
      email: { type: "string" },
      address: {
        street: {type: "string"},
        asuite: {type: "string"},
        city: {type: "string"},
        zipcode: {type: "string"},
    geo: {
        lat: {type: "string"},
        lng: {type: "string"}
    },
    },
    phone: { type: "string" },
    website:  { type: "string" },
    company: {
        name: {type: "string"},
        catchPhhrase: {type: "string"},
        bs: {type: "string"}
    }
    },
    required: ["name", "username", "email", "address","phone","website","company","id"]
};

const responseJson = pm.response.json();

const validate = ajv.compile(schema);
const valid = validate(responseJson);

pm.test("Check response schema is valid", function() {
  pm.expect(valid).to.be.true;

  if (!valid) {
    console.log(validate.errors); // Log validation errors if schema is invalid
  }
});
pm.test("Check response status code is 201", function () {
    pm.response.to.have.status(201);
});
pm.test("Check response status code name has string", function () {
    pm.response.to.have.status("Created");
});
pm.test("Check response time is less than 1000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(1000);
});
pm.test("Check request headers", function () {
    pm.response.to.have.header("Content-Type");
    pm.response.to.have.header("Location");
    pm.response.to.have.header("Date");
    pm.response.to.have.header("Content-Length");
});
pm.test("Check response properties", function () {
    const expectedResponse = 
    {
    "name": "Sokratis Glavinas",
    "username": "Sok12345",
    "email": "anexamplemail@april.biz",
    "address": {
        "street": "Kulas Light",
        "suite": "Apt. 556",
        "city": "Gwenborough",
        "zipcode": "92998-3874",
        "geo": {
            "lat": "-37.3159",
            "lng": "81.1496"
        }
    },
    "phone": "1-770-736-8031 x56442",
    "website": "hildegard.org",
    "company": {
        "name": "Romaguera-Crona",
        "catchPhrase": "Multi-layered client-server neural-net",
        "bs": "harness real-time e-markets"
    },
    "id": 11
}
    var jsonData = pm.response.json();
    pm.expect(jsonData.id).to.eql(expectedResponse.id);
    pm.expect(jsonData.name).to.eql(expectedResponse.name);
    pm.expect(jsonData.username).to.eql(expectedResponse.username);
    pm.expect(jsonData.email).to.eql(expectedResponse.email);
    pm.expect(jsonData.address.street).to.eql(expectedResponse.address.street);
    pm.expect(jsonData.address.suite).to.eql(expectedResponse.address.suite);
    pm.expect(jsonData.address.city).to.eql(expectedResponse.address.city);
    pm.expect(jsonData.address.zipcode).to.eql(expectedResponse.address.zipcode);
    pm.expect(jsonData.address.geo.lat).to.eql(expectedResponse.address.geo.lat);
    pm.expect(jsonData.address.geo.lng).to.eql(expectedResponse.address.geo.lng);
    pm.expect(jsonData.phone).to.eql(expectedResponse.phone);
    pm.expect(jsonData.website).to.eql(expectedResponse.website);
    pm.expect(jsonData.company.name).to.eql(expectedResponse.company.name);
    pm.expect(jsonData.company.bs).to.eql(expectedResponse.company.bs);
    pm.expect(jsonData.company.catchPhrase).to.eql(expectedResponse.company.catchPhrase);
});