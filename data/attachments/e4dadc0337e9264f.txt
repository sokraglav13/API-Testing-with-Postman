const Ajv = require('ajv');
const ajv = new Ajv();

const schema = {
    type: "object",
    properties: {
      albumId: { type: "integer" },
      id: { type: "integer" },
      title: { type: "string" },
      url: { type: "string"},
      thumbnailUrl: {type: "string"}
    },
    required: ["albumId", "id", "title", "url", "thumbnailUrl"]
};

const responseJson = pm.response.json();

const validate = ajv.compile(schema);
const valid = validate(responseJson);

pm.test("Check response schema is valid", function() {
  pm.expect(valid).to.be.true;

  if (!valid) {
    console.log(validate.errors); // Log validation errors if schema is invalid
  }
});
pm.test("Check response status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Check response status code name has string", function () {
    pm.response.to.have.status("OK");
});
pm.test("Check response time is less than 1000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(1000);
});
pm.test("Check request headers", function () {
    pm.response.to.have.header("Content-Type");
    pm.response.to.have.header("Date");
});
pm.test("Check albumId property value", function () {
    const unchaingedProperties = {
    "albumId": 1,
    "id": 1,
    "title": "accusamus beatae ad facilis cum similique qui sunt",
    "url": "https://via.placeholder.com/600/92c952",
    }
    var jsonData = pm.response.json();
    pm.expect(jsonData.title).to.eql(unchaingedProperties.title);
    pm.expect(jsonData.id).to.eql(unchaingedProperties.id);
    pm.expect(jsonData.albumId).to.eql(unchaingedProperties.albumId);
    pm.expect(jsonData.url).to.eql(unchaingedProperties.url);
    pm.expect(jsonData.thumbnailUrl).to.eql("https://examplethumb.com");
});
