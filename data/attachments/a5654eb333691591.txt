const Ajv = require('ajv');
const ajv = new Ajv();

const schema = {
  type: "object",
  properties: {
    id: { type: "integer" },
    title: { type: "string" },
  },
  required: ["id", "title"]
};

const responseJson = pm.response.json();

const validate = ajv.compile(schema);
const valid = validate(responseJson);

pm.test("Check response schema is valid", function() {
  pm.expect(valid).to.be.true;

  if (!valid) {
    console.log(validate.errors); // Log validation errors if schema is invalid
  }
});
pm.test("Check response status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Check response status code name has string", function () {
    pm.response.to.have.status("OK");
});
pm.test("Check response time is less than 1000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(1000);
});
pm.test("Check request headers", function () {
    pm.response.to.have.header("Content-Type");
    pm.response.to.have.header("Date");
});
pm.test("Check albumId ,Id, title, url, thumbnailUrl property value", function () {
    const expectedResponse = {
    "albumId": 8888,
    "id": 1,
    "title": "Put Method used",
    "url": "https://example.com",
    "thumbnailUrl": "https://placeholder.com"
}
    var jsonData = pm.response.json();
    pm.expect(jsonData.title).to.eql(expectedResponse.title);
    pm.expect(jsonData.id).to.eql(expectedResponse.id);
    pm.expect(jsonData.albumId).to.eql(expectedResponse.albumId);
    pm.expect(jsonData.url).to.eql(expectedResponse.url);
    pm.expect(jsonData.thumbnailUrl).to.eql(expectedResponse.thumbnailUrl);
});
