const Ajv = require('ajv');
const ajv = new Ajv();

const schema = {
  type: "object",
  properties: {
    postId: { type: "integer" },
    id: { type: "integer" },
    name: { type: "string" },
    email: { type: "string"},
    body: { type: "string" }
  },
  required: ["postId", "id", "name", "email", "body"]
};

const responseJson = pm.response.json();

const validate = ajv.compile(schema);
const valid = validate(responseJson);

pm.test("Check response schema is valid", function() {
  pm.expect(valid).to.be.true;

  if (!valid) {
    console.log(validate.errors); // Log validation errors if schema is invalid
  }
});
pm.test("Check response status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Check response status code name has string", function () {
    pm.response.to.have.status("OK");
});
pm.test("Check response time is less than 1000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(1000);
});
pm.test("Check request headers", function () {
    pm.response.to.have.header("Content-Type");
    pm.response.to.have.header("Date");
});
pm.test("Check title property value", function () {
    const unchangedProperties = {
    postId: 1,
    id: 1,
    name: "id labore ex et quam laborum",
    email: "Eliseo@gardner.biz",
    body: "laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"
    }
    var jsonData = pm.response.json();
    pm.expect(jsonData.postId).to.eql(123);
    pm.expect(jsonData.id).to.eql(unchangedProperties.id);
    pm.expect(jsonData.email).to.eql(unchangedProperties.email);
    pm.expect(jsonData.body).to.eql(unchangedProperties.body);
    pm.expect(jsonData.name).to.eql(unchangedProperties.name);
});
