const Ajv = require('ajv');
const ajv = new Ajv();

const schema = {
  type: "array",
  items: {
    type: "object",
    properties: {
      userId: { type: "integer" },
      id: { type: "integer" },
      title: { type: "string" },
      body: { type: "string" }
    },
    required: ["userId", "id", "title", "body"]
  }
};

const responseJson = pm.response.json();

const validate = ajv.compile(schema);
const valid = validate(responseJson);

pm.test("Check response schema is valid", function() {
  pm.expect(valid).to.be.true;

  if (!valid) {
    console.log(validate.errors); // Log validation errors if schema is invalid
  }
});

pm.test("Check response status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Check response status code name has string", function () {
    pm.response.to.have.status("OK");
});

pm.test("Check response time is less than 600ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(600);
});

pm.test("Check request headers", function () {
    pm.response.to.have.header("Content-Type");
});

pm.test("Check userId property value", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData[0].userId).to.eql(1);
});