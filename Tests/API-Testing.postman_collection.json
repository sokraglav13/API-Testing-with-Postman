{
	"info": {
		"_postman_id": "2b737efa-ba33-4697-af5c-4f5f036e38d5",
		"name": "API-Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13454805"
	},
	"item": [
		{
			"name": "Posts",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "GetAllPosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check userId property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].userId).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{BaseURL}}{{Posts}}",
									"host": [
										"{{BaseURL}}{{Posts}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetFirstPost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check first object property values\", function () {\r",
											"    const expectedData = {\r",
											"    \"userId\": 1,\r",
											"    \"id\": 1,\r",
											"    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\r",
											"    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\r",
											"};\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(expectedData.userId);\r",
											"    pm.expect(jsonData.id).to.eql(expectedData.id);\r",
											"    pm.expect(jsonData.title).to.eql(expectedData.title);\r",
											"    pm.expect(jsonData.body).to.eql(expectedData.body);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Posts}}/1",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPostByUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check userId property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for(let i=0;i<jsonData.length;i++){\r",
											"        pm.expect(jsonData[i].userId).to.eql(1);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Posts}}?userId=1",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPostById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check response headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check id property value\", function () {\r",
											"    const expectedId = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(expectedId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Posts}}?id=1",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPostByTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check title property value\", function () {\r",
											"    const expectedTitle = \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\";\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].title).to.eql(expectedTitle);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Posts}}?title=sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"query": [
										{
											"key": "title",
											"value": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "PostNewEntry",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Check response time time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Headers Content-Type, Location, Date, Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"pm.test(\"Check Id property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(101);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userId\": 1,\r\n\"title\": \"A Sample Entry\",\r\n\"body\": \"Example 123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Posts}}",
									"host": [
										"{{BaseURL}}{{Posts}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "PutNewInformations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    userId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Id, title, body, userId property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(412);\r",
											"    pm.expect(jsonData.title).to.eql(\"Put some new information\");\r",
											"    pm.expect(jsonData.body).to.eql(\"vel nihil molestiae eprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\");\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 412,\r\n\"title\": \"Put some new information\",\r\n\"body\": \"vel nihil molestiae eprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Posts}}/2",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"path": [
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PatchPostTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    userId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check title property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(\"Updated Title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Updated Title\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Posts}}/1",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchPostUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    userId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check userId property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(123);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Posts}}/1",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchPostBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    userId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"userId\", \"id\", \"title\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check body property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.body).to.eql(\"An Updated Body Text\");\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": \"An Updated Body Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Posts}}/1",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DeleteFirstPost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\"\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Response Object\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Posts}}/1",
									"host": [
										"{{BaseURL}}{{Posts}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "PostNewComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      postId: { type: \"string\" },\r",
											"      email: { type: \"string\"},\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"postId\", \"id\", \"email\", \"body\", \"name\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"pm.test(\"Check Id property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(501);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"postId\": \"12\",\r\n   \"name\": \"Sokrates\",\r\n   \"email\": \"Sokrates@sokrates.com\",\r\n   \"body\": \"New Comment!\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Comments}}",
									"host": [
										"{{BaseURL}}{{Comments}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "PutNewInformation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    postId: { type: \"string\" },\r",
											"    id: { type: \"integer\" },\r",
											"    name: { type: \"string\" },\r",
											"    email: { type: \"string\"},\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"postId\", \"id\", \"name\", \"email\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Id, title, body, userId property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.eql(\"123\");\r",
											"    pm.expect(jsonData.name).to.eql(\"Sokrates\");\r",
											"    pm.expect(jsonData.body).to.eql(\"New Comment!\");\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"postId\": \"123\",\r\n    \"name\": \"Sokrates\",\r\n    \"email\": \"Sokrates@sokrates.com\",\r\n    \"body\": \"New Comment!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Comments}}/2",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"path": [
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PatchCommentName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    postId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    name: { type: \"string\" },\r",
											"    email: { type: \"string\"},\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"postId\", \"id\", \"name\", \"email\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check title property value\", function () {\r",
											"    const unchangedProperties = {\r",
											"    postId: 1,\r",
											"    id: 1,\r",
											"    email: \"Eliseo@gardner.biz\",\r",
											"    body: \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.eql(unchangedProperties.postId);\r",
											"    pm.expect(jsonData.id).to.eql(unchangedProperties.id);\r",
											"    pm.expect(jsonData.email).to.eql(unchangedProperties.email);\r",
											"    pm.expect(jsonData.body).to.eql(unchangedProperties.body);\r",
											"    pm.expect(jsonData.name).to.eql(\"Updated Title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated Title\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Comments}}/1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchCommentEmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    postId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    name: { type: \"string\" },\r",
											"    email: { type: \"string\"},\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"postId\", \"id\", \"name\", \"email\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check title property value\", function () {\r",
											"    const unchangedProperties = {\r",
											"    postId: 1,\r",
											"    id: 1,\r",
											"    name: \"id labore ex et quam laborum\",\r",
											"    email: \"Eliseo@gardner.biz\",\r",
											"    body: \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.eql(unchangedProperties.postId);\r",
											"    pm.expect(jsonData.id).to.eql(unchangedProperties.id);\r",
											"    pm.expect(jsonData.email).to.eql(\"newemail@newacc.com\");\r",
											"    pm.expect(jsonData.body).to.eql(unchangedProperties.body);\r",
											"    pm.expect(jsonData.name).to.eql(unchangedProperties.name);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"newemail@newacc.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Comments}}/1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchCommentPostId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    postId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    name: { type: \"string\" },\r",
											"    email: { type: \"string\"},\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"postId\", \"id\", \"name\", \"email\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check title property value\", function () {\r",
											"    const unchangedProperties = {\r",
											"    postId: 1,\r",
											"    id: 1,\r",
											"    name: \"id labore ex et quam laborum\",\r",
											"    email: \"Eliseo@gardner.biz\",\r",
											"    body: \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.eql(123);\r",
											"    pm.expect(jsonData.id).to.eql(unchangedProperties.id);\r",
											"    pm.expect(jsonData.email).to.eql(unchangedProperties.email);\r",
											"    pm.expect(jsonData.body).to.eql(unchangedProperties.body);\r",
											"    pm.expect(jsonData.name).to.eql(unchangedProperties.name);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"postId\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Comments}}/1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchCommentBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    postId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    name: { type: \"string\" },\r",
											"    email: { type: \"string\"},\r",
											"    body: { type: \"string\" }\r",
											"  },\r",
											"  required: [\"postId\", \"id\", \"name\", \"email\", \"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check title property value\", function () {\r",
											"    const unchangedProperties = {\r",
											"    postId: 1,\r",
											"    id: 1,\r",
											"    name: \"id labore ex et quam laborum\",\r",
											"    email: \"Eliseo@gardner.biz\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.eql(unchangedProperties.postId);\r",
											"    pm.expect(jsonData.id).to.eql(unchangedProperties.id);\r",
											"    pm.expect(jsonData.email).to.eql(unchangedProperties.email);\r",
											"    pm.expect(jsonData.body).to.eql(\"An Updated Body Text\");\r",
											"    pm.expect(jsonData.name).to.eql(unchangedProperties.name);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": \"An Updated Body Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Comments}}/1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DeleteFirstComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\"\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Response Object \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Comments}}/1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GetAllComments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      postId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      body: {type: \"string\"}\r",
											"    },\r",
											"    required: [\"postId\", \"id\", \"name\", \"email\", \"body\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check first comment properties value\", function () {\r",
											"    const expectedResponseObjects = 500;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Comments}}",
									"host": [
										"{{BaseURL}}{{Comments}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetFirstComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      postId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      email: { type: \"string\"},\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"postId\", \"id\", \"name\", \"email\",\"body\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check first comment properties value\", function () {\r",
											"    const expectedData = {\r",
											"    \"postId\": 1,\r",
											"    \"id\": 1,\r",
											"    \"name\": \"id labore ex et quam laborum\",\r",
											"    \"email\": \"Eliseo@gardner.biz\",\r",
											"    \"body\": \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\r",
											"};\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.eql(expectedData.postId);\r",
											"    pm.expect(jsonData.id).to.eql(expectedData.id);\r",
											"    pm.expect(jsonData.name).to.eql(expectedData.name);\r",
											"    pm.expect(jsonData.email).to.eql(expectedData.email);\r",
											"    pm.expect(jsonData.body).to.eql(expectedData.body);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Comments}}/1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCommentsByPostId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      postId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      email: { type: \"string\"},\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"postId\", \"id\", \"name\", \"email\",\"body\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check postId property value\", function () {\r",
											"    const expectedPostIdValue = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    for(let i=0;i<jsonData.length;i++){\r",
											"        pm.expect(jsonData[i].postId).to.eql(expectedPostIdValue);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Comments}}?postId=1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"query": [
										{
											"key": "postId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCommentsById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      postId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      email: { type: \"string\"},\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"postId\", \"id\", \"name\", \"email\",\"body\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check Id property value\", function () {\r",
											"    const expectedIdValue = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    for(let i=0;i<jsonData.length;i++){\r",
											"        pm.expect(jsonData[i].id).to.eql(expectedIdValue);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Comments}}?id=1",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCommentByName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      postId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      email: { type: \"string\"},\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"postId\", \"id\", \"name\", \"email\",\"body\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check Name property value\", function () {\r",
											"    const expectedNameValue = \"id labore ex et quam laborum\";\r",
											"    var jsonData = pm.response.json();\r",
											"    for(let i=0;i<jsonData.length;i++){\r",
											"        pm.expect(jsonData[i].name).to.eql(expectedNameValue);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Comments}}?name=id labore ex et quam laborum",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"query": [
										{
											"key": "name",
											"value": "id labore ex et quam laborum"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCommentByEmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      postId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      email: { type: \"string\"},\r",
											"      body: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"postId\", \"id\", \"name\", \"email\",\"body\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check Email property value\", function () {\r",
											"    const expectedEmailValue = \"Eliseo@gardner.biz\";\r",
											"    var jsonData = pm.response.json();\r",
											"    for(let i=0;i<jsonData.length;i++){\r",
											"        pm.expect(jsonData[i].email).to.eql(expectedEmailValue);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Comments}}?email=Eliseo@gardner.biz",
									"host": [
										"{{BaseURL}}{{Comments}}"
									],
									"query": [
										{
											"key": "email",
											"value": "Eliseo@gardner.biz"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Albums",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "PostNewAlbum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"pm.test(\"Check Id property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(101);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 56,\r\n    \"title\": \"New Album\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Albums}}",
									"host": [
										"{{BaseURL}}{{Albums}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "PutNewInformation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"  },\r",
											"  required: [\"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Id, title, body, userId property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(\"Changed Title with PUT Method\");\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Changed Title with PUT Method\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Albums}}/1",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PatchAlbumTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    userId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"  },\r",
											"  required: [\"userId\", \"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check title property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(\"Updated Title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Updated Title\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Albums}}/1",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchAlbumUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    userId: { type: \"integer\" },\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" }\r",
											"      },\r",
											"  required: [\"userId\", \"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check userId property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(123);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Albums}}/1",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DeleteFirstAlbum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\"\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Response Object \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Albums}}/1",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GetAllAlbums",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check album number properties value\", function () {\r",
											"    const expectedResponseObjects = 100;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Albums}}",
									"host": [
										"{{BaseURL}}{{Albums}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetFirstAlbums",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check first album properties value\", function () {\r",
											"    const expectedData = {\r",
											"    \"userId\": 1,\r",
											"    \"id\": 1,\r",
											"    \"title\": \"quidem molestiae enim\"\r",
											"};\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(expectedData.userId);\r",
											"    pm.expect(jsonData.id).to.eql(expectedData.id);\r",
											"    pm.expect(jsonData.title).to.eql(expectedData.title);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Albums}}/1",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAlbumByUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check number of objects by userId property value\", function () {\r",
											"    const expectedObjectWithUserId1 = 10;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedObjectWithUserId1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Albums}}?userId=1",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAlbumById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check object with Id = 1 property value\", function () {\r",
											"    const expectedObjectValues = {\r",
											"        \"userId\": 1,\r",
											"        \"id\": 1,\r",
											"        \"title\": \"quidem molestiae enim\"\r",
											"    };\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(expectedObjectValues.id);\r",
											"    pm.expect(jsonData[0].userId).to.eql(expectedObjectValues.userId);\r",
											"    pm.expect(jsonData[0].title).to.eql(expectedObjectValues.title);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Albums}}?id=1",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAlbumByTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check object by title property value\", function () {\r",
											"    const expectedObjectValues = {\r",
											"        \"userId\": 1,\r",
											"        \"id\": 1,\r",
											"        \"title\": \"quidem molestiae enim\"\r",
											"    };\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(expectedObjectValues.id);\r",
											"    pm.expect(jsonData[0].userId).to.eql(expectedObjectValues.userId);\r",
											"    pm.expect(jsonData[0].title).to.eql(expectedObjectValues.title);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Albums}}?title=quidem molestiae enim",
									"host": [
										"{{BaseURL}}{{Albums}}"
									],
									"query": [
										{
											"key": "title",
											"value": "quidem molestiae enim"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Photos",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "PostNewPhoto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\"},\r",
											"      thumbnailUrl: {type: \"string\"}\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response object\", function () {\r",
											"   const expectedResponse = {\r",
											"        \"albumId\": 531,\r",
											"    \"id\": 5001,\r",
											"    \"title\": \"New Photo\",\r",
											"    \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"    \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponse.id);\r",
											"    pm.expect(jsonData.albumId).to.eql(expectedResponse.albumId);\r",
											"    pm.expect(jsonData.title).to.eql(expectedResponse.title);\r",
											"    pm.expect(jsonData.url).to.eql(expectedResponse.url);\r",
											"    pm.expect(jsonData.thumbnailUrl).to.eql(expectedResponse.thumbnailUrl);\r",
											"});\r",
											"    "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"albumId\": 531,\r\n        \"id\": 1,\r\n        \"title\": \"New Photo\",\r\n        \"url\": \"https://via.placeholder.com/600/92c952\",\r\n        \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Photos}}",
									"host": [
										"{{BaseURL}}{{Photos}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "PutNewInformation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"  },\r",
											"  required: [\"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check albumId ,Id, title, url, thumbnailUrl property value\", function () {\r",
											"    const expectedResponse = {\r",
											"    \"albumId\": 8888,\r",
											"    \"id\": 1,\r",
											"    \"title\": \"Put Method used\",\r",
											"    \"url\": \"https://example.com\",\r",
											"    \"thumbnailUrl\": \"https://placeholder.com\"\r",
											"}\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(expectedResponse.title);\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponse.id);\r",
											"    pm.expect(jsonData.albumId).to.eql(expectedResponse.albumId);\r",
											"    pm.expect(jsonData.url).to.eql(expectedResponse.url);\r",
											"    pm.expect(jsonData.thumbnailUrl).to.eql(expectedResponse.thumbnailUrl);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"albumId\": 8888,\r\n    \"id\": 5001,\r\n    \"title\": \"Put Method used\",\r\n    \"url\": \"https://example.com\",\r\n    \"thumbnailUrl\": \"https://placeholder.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Photos}}/1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PatchPhotoAlbumId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\"},\r",
											"      thumbnailUrl: {type: \"string\"}\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check r1esponse schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check albumId property value\", function () {\r",
											"    const unchaingedProperties = {\r",
											"    \"id\": 1,\r",
											"    \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"    \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"    \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(unchaingedProperties.title);\r",
											"    pm.expect(jsonData.id).to.eql(unchaingedProperties.id);\r",
											"    pm.expect(jsonData.albumId).to.eql(777777);\r",
											"    pm.expect(jsonData.url).to.eql(unchaingedProperties.url);\r",
											"    pm.expect(jsonData.thumbnailUrl).to.eql(unchaingedProperties.thumbnailUrl);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"albumId\": 777777\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Photos}}/1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchPhotoTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\"},\r",
											"      thumbnailUrl: {type: \"string\"}\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check albumId property value\", function () {\r",
											"    const unchaingedProperties = {\r",
											"    \"id\": 1,\r",
											"    \"albumId\": 1,\r",
											"    \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"    \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"    \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(\"Patch Title\");\r",
											"    pm.expect(jsonData.id).to.eql(unchaingedProperties.id);\r",
											"    pm.expect(jsonData.albumId).to.eql(unchaingedProperties.albumId);\r",
											"    pm.expect(jsonData.url).to.eql(unchaingedProperties.url);\r",
											"    pm.expect(jsonData.thumbnailUrl).to.eql(unchaingedProperties.thumbnailUrl);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Patch Title\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Photos}}/1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchPhotoUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\"},\r",
											"      thumbnailUrl: {type: \"string\"}\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check albumId property value\", function () {\r",
											"    const unchaingedProperties = {\r",
											"    \"id\": 1,\r",
											"    \"albumId\": 1,\r",
											"    \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"    \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(unchaingedProperties.title);\r",
											"    pm.expect(jsonData.id).to.eql(unchaingedProperties.id);\r",
											"    pm.expect(jsonData.albumId).to.eql(unchaingedProperties.albumId);\r",
											"    pm.expect(jsonData.url).to.eql(\"https://anexampleurl.com\");\r",
											"    pm.expect(jsonData.thumbnailUrl).to.eql(unchaingedProperties.thumbnailUrl);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"url\": \"https://anexampleurl.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Photos}}/1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchPhotoThumbnailUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\"},\r",
											"      thumbnailUrl: {type: \"string\"}\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check albumId property value\", function () {\r",
											"    const unchaingedProperties = {\r",
											"    \"albumId\": 1,\r",
											"    \"id\": 1,\r",
											"    \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"    \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(unchaingedProperties.title);\r",
											"    pm.expect(jsonData.id).to.eql(unchaingedProperties.id);\r",
											"    pm.expect(jsonData.albumId).to.eql(unchaingedProperties.albumId);\r",
											"    pm.expect(jsonData.url).to.eql(unchaingedProperties.url);\r",
											"    pm.expect(jsonData.thumbnailUrl).to.eql(\"https://examplethumb.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"thumbnailUrl\": \"https://examplethumb.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Photos}}/1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DeleteFirstPhoto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\"\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Response Object \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}/1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GetAllPhotos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\" },\r",
											"      thumbnailUrl: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of photos objects\", function () {\r",
											"    const expectedResponseObjects = 5000;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}",
									"host": [
										"{{BaseURL}}{{Photos}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetFirstPhoto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\" },\r",
											"      tthumbnailUrl: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check first photo properties value\", function () {\r",
											"    const expectedData = {\r",
											"    \"albumId\": 1,\r",
											"    \"id\": 1,\r",
											"    \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"    \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"    \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"};\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.albumId).to.eql(expectedData.albumId);\r",
											"    pm.expect(jsonData.id).to.eql(expectedData.id);\r",
											"    pm.expect(jsonData.title).to.eql(expectedData.title);\r",
											"    pm.expect(jsonData.url).to.eql(expectedData.url);\r",
											"    pm.expect(jsonData.thumbnailUrl).to.eql(expectedData.thumbnailUrl);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}/1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPhotoByAlbumId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\" },\r",
											"      tthumbnailUrl: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check album with value 1 properties value\", function () {\r",
											"    const expectedResponseObjects = 50;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).eql(expectedResponseObjects)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}?albumId=1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"query": [
										{
											"key": "albumId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPhotoById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\" },\r",
											"      tthumbnailUrl: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check photo with if value = 1 properties value\", function () {\r",
											"    const expectedResponse = {\r",
											"        \"albumId\": 1,\r",
											"        \"id\": 1,\r",
											"        \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"        \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"        \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    };\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].albumId).eql(expectedResponse.albumId)\r",
											"    pm.expect(jsonData[0].id).eql(expectedResponse.id)\r",
											"    pm.expect(jsonData[0].title).eql(expectedResponse.title)\r",
											"    pm.expect(jsonData[0].url).eql(expectedResponse.url)\r",
											"    pm.expect(jsonData[0].thumbnailUrl).eql(expectedResponse.thumbnailUrl)\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}?id=1",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPhotoByTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\" },\r",
											"      tthumbnailUrl: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check photo by title properties value\", function () {\r",
											"    const expectedResponse = {\r",
											"        \"albumId\": 1,\r",
											"        \"id\": 1,\r",
											"        \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"        \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"        \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    };\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].albumId).eql(expectedResponse.albumId)\r",
											"    pm.expect(jsonData[0].id).eql(expectedResponse.id)\r",
											"    pm.expect(jsonData[0].title).eql(expectedResponse.title)\r",
											"    pm.expect(jsonData[0].url).eql(expectedResponse.url)\r",
											"    pm.expect(jsonData[0].thumbnailUrl).eql(expectedResponse.thumbnailUrl)\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}?title=accusamus beatae ad facilis cum similique qui sunt",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"query": [
										{
											"key": "title",
											"value": "accusamus beatae ad facilis cum similique qui sunt"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPhotoByUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\" },\r",
											"      tthumbnailUrl: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check photo by url properties value\", function () {\r",
											"    const expectedResponse = {\r",
											"        \"albumId\": 1,\r",
											"        \"id\": 1,\r",
											"        \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"        \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"        \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    };\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].albumId).eql(expectedResponse.albumId)\r",
											"    pm.expect(jsonData[0].id).eql(expectedResponse.id)\r",
											"    pm.expect(jsonData[0].title).eql(expectedResponse.title)\r",
											"    pm.expect(jsonData[0].url).eql(expectedResponse.url)\r",
											"    pm.expect(jsonData[0].thumbnailUrl).eql(expectedResponse.thumbnailUrl)\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}?url=https://via.placeholder.com/600/92c952",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"query": [
										{
											"key": "url",
											"value": "https://via.placeholder.com/600/92c952"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPhotoByThumbnailUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      albumId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      url: { type: \"string\" },\r",
											"      tthumbnailUrl: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check photo by thumbnailUrl property value\", function () {\r",
											"    const expectedResponse = {\r",
											"        \"albumId\": 1,\r",
											"        \"id\": 1,\r",
											"        \"title\": \"accusamus beatae ad facilis cum similique qui sunt\",\r",
											"        \"url\": \"https://via.placeholder.com/600/92c952\",\r",
											"        \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\r",
											"    };\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].albumId).eql(expectedResponse.albumId)\r",
											"    pm.expect(jsonData[0].id).eql(expectedResponse.id)\r",
											"    pm.expect(jsonData[0].title).eql(expectedResponse.title)\r",
											"    pm.expect(jsonData[0].url).eql(expectedResponse.url)\r",
											"    pm.expect(jsonData[0].thumbnailUrl).eql(expectedResponse.thumbnailUrl)\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Photos}}?thumbnailUrl=https://via.placeholder.com/150/92c952",
									"host": [
										"{{BaseURL}}{{Photos}}"
									],
									"query": [
										{
											"key": "thumbnailUrl",
											"value": "https://via.placeholder.com/150/92c952"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Todos",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "PostNewTodo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      completed: {type: \"boolean\"}\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"completed\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"pm.test(\"Check properties\", function () {\r",
											"    const expectedResponse = \r",
											"    {\r",
											"    \"id\": 201,\r",
											"    \"userId\": 1,\r",
											"    \"title\": \"New Entry\",\r",
											"    \"completed\": true\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponse.id);\r",
											"    pm.expect(jsonData.userId).to.eql(expectedResponse.userId);\r",
											"    pm.expect(jsonData.title).to.eql(expectedResponse.title);\r",
											"    pm.expect(jsonData.completed).to.eql(expectedResponse.completed);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"userId\": 1,\r\n        \"title\": \"New Entry\",\r\n        \"completed\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Todos}}",
									"host": [
										"{{BaseURL}}{{Todos}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "PutNewInformation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"  },\r",
											"  required: [\"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check userId ,id, title, completed property value\", function () {\r",
											"    const expectedResponse = {\r",
											"    \"userId\": 3333333,\r",
											"    \"title\": \"PUT METHOD\",\r",
											"    \"completed\": true,\r",
											"    \"id\": 1\r",
											"}\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(expectedResponse.title);\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponse.id);\r",
											"    pm.expect(jsonData.userId).to.eql(expectedResponse.userId);\r",
											"    pm.expect(jsonData.completed).to.eql(expectedResponse.completed);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 3333333,\r\n    \"title\": \"PUT METHOD\",\r\n    \"completed\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Todos}}/1",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PatchTodosTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\",\r",
											"  properties: {\r",
											"    id: { type: \"integer\" },\r",
											"    title: { type: \"string\" },\r",
											"  },\r",
											"  required: [\"id\", \"title\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check patched title completed property value\", function () {\r",
											"    const expectedResponse = {\r",
											"    \"userId\": 1,\r",
											"    \"id\": 1,\r",
											"    \"title\": \"another title\",\r",
											"    \"completed\": false\r",
											"}\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(expectedResponse.title);\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponse.id);\r",
											"    pm.expect(jsonData.userId).to.eql(expectedResponse.userId);\r",
											"    pm.expect(jsonData.completed).to.eql(expectedResponse.completed);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"another title\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Todos}}/1",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DeleteFirstTodo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\"\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Response Object \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Todos}}/1",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GetAllTodos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      completed: { type: \"boolean\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"completed\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 200;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Todos}}",
									"host": [
										"{{BaseURL}}{{Todos}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetFirstTodo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      completed: { type: \"boolean\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"completed\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check response objects properties\", function () {\r",
											"    const expectedResponseObject = {\r",
											"    \"userId\": 1,\r",
											"    \"id\": 1,\r",
											"    \"title\": \"delectus aut autem\",\r",
											"    \"completed\": false\r",
											"}\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(expectedResponseObject.userId);\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponseObject.id);\r",
											"    pm.expect(jsonData.title).to.eql(expectedResponseObject.title);\r",
											"    pm.expect(jsonData.completed).to.eql(expectedResponseObject.completed);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Todos}}/1",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTodoByUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      completed: { type: \"boolean\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"completed\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 20;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Todos}}?userId=1",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTodoById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      completed: { type: \"boolean\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"completed\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Todos}}?id=1",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTodoByTtitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      completed: { type: \"boolean\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"completed\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Todos}}?title=delectus aut autem",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"query": [
										{
											"key": "title",
											"value": "delectus aut autem"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTodoByCompleteStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"array\",\r",
											"  items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      userId: { type: \"integer\" },\r",
											"      id: { type: \"integer\" },\r",
											"      title: { type: \"string\" },\r",
											"      completed: { type: \"boolean\" }\r",
											"    },\r",
											"    required: [\"userId\", \"id\", \"title\", \"completed\"]\r",
											"  }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 110;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Todos}}?completed=false",
									"host": [
										"{{BaseURL}}{{Todos}}"
									],
									"query": [
										{
											"key": "completed",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "PostNewUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"pm.test(\"Check response properties\", function () {\r",
											"    const expectedResponse = \r",
											"    {\r",
											"    \"name\": \"Sokratis Glavinas\",\r",
											"    \"username\": \"Sok12345\",\r",
											"    \"email\": \"anexamplemail@april.biz\",\r",
											"    \"address\": {\r",
											"        \"street\": \"Kulas Light\",\r",
											"        \"suite\": \"Apt. 556\",\r",
											"        \"city\": \"Gwenborough\",\r",
											"        \"zipcode\": \"92998-3874\",\r",
											"        \"geo\": {\r",
											"            \"lat\": \"-37.3159\",\r",
											"            \"lng\": \"81.1496\"\r",
											"        }\r",
											"    },\r",
											"    \"phone\": \"1-770-736-8031 x56442\",\r",
											"    \"website\": \"hildegard.org\",\r",
											"    \"company\": {\r",
											"        \"name\": \"Romaguera-Crona\",\r",
											"        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r",
											"        \"bs\": \"harness real-time e-markets\"\r",
											"    },\r",
											"    \"id\": 11\r",
											"}\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponse.id);\r",
											"    pm.expect(jsonData.name).to.eql(expectedResponse.name);\r",
											"    pm.expect(jsonData.username).to.eql(expectedResponse.username);\r",
											"    pm.expect(jsonData.email).to.eql(expectedResponse.email);\r",
											"    pm.expect(jsonData.address.street).to.eql(expectedResponse.address.street);\r",
											"    pm.expect(jsonData.address.suite).to.eql(expectedResponse.address.suite);\r",
											"    pm.expect(jsonData.address.city).to.eql(expectedResponse.address.city);\r",
											"    pm.expect(jsonData.address.zipcode).to.eql(expectedResponse.address.zipcode);\r",
											"    pm.expect(jsonData.address.geo.lat).to.eql(expectedResponse.address.geo.lat);\r",
											"    pm.expect(jsonData.address.geo.lng).to.eql(expectedResponse.address.geo.lng);\r",
											"    pm.expect(jsonData.phone).to.eql(expectedResponse.phone);\r",
											"    pm.expect(jsonData.website).to.eql(expectedResponse.website);\r",
											"    pm.expect(jsonData.company.name).to.eql(expectedResponse.company.name);\r",
											"    pm.expect(jsonData.company.bs).to.eql(expectedResponse.company.bs);\r",
											"    pm.expect(jsonData.company.catchPhrase).to.eql(expectedResponse.company.catchPhrase);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sokratis Glavinas\",\r\n    \"username\": \"Sok12345\",\r\n    \"email\": \"anexamplemail@april.biz\",\r\n    \"address\": {\r\n        \"street\": \"Kulas Light\",\r\n        \"suite\": \"Apt. 556\",\r\n        \"city\": \"Gwenborough\",\r\n        \"zipcode\": \"92998-3874\",\r\n        \"geo\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"lng\": \"81.1496\"\r\n        }\r\n    },\r\n    \"phone\": \"1-770-736-8031 x56442\",\r\n    \"website\": \"hildegard.org\",\r\n    \"company\": {\r\n        \"name\": \"Romaguera-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Users}}",
									"host": [
										"{{BaseURL}}{{Users}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "PutNewInformation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check user property value\", function () {\r",
											"    const expectedResponse = {\r",
											"    \"name\": \"New Name\",\r",
											"    \"username\": \"Grola\",\r",
											"    \"email\": \"Sifvcq@adsril.bds\",\r",
											"    \"address\": {\r",
											"        \"street\": \"Long Aw\",\r",
											"        \"suite\": \"Apt. 6\",\r",
											"        \"city\": \"faxcugh\",\r",
											"        \"zipcode\": \"9328-4332\",\r",
											"        \"geo\": {\r",
											"            \"lat\": \"-37.1159\",\r",
											"            \"lng\": \"81.1233\"\r",
											"        }\r",
											"    },\r",
											"    \"phone\": \"1-770-736-321 x56321\",\r",
											"    \"website\": \"hidwsx.org\",\r",
											"    \"company\": {\r",
											"        \"name\": \"Rxa.ca\",\r",
											"        \"catchPhrase\": \"Multi-layedsdsa ent-server neural-net\",\r",
											"        \"bs\": \"harnesdae e-markets\"\r",
											"    },\r",
											"    \"id\": 1\r",
											"}\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(expectedResponse.id);\r",
											"    pm.expect(jsonData.name).to.eql(expectedResponse.name);\r",
											"    pm.expect(jsonData.username).to.eql(expectedResponse.username);\r",
											"    pm.expect(jsonData.email).to.eql(expectedResponse.email);\r",
											"    pm.expect(jsonData.address.street).to.eql(expectedResponse.address.street);\r",
											"    pm.expect(jsonData.address.suite).to.eql(expectedResponse.address.suite);\r",
											"    pm.expect(jsonData.address.city).to.eql(expectedResponse.address.city);\r",
											"    pm.expect(jsonData.address.zipcode).to.eql(expectedResponse.address.zipcode);\r",
											"    pm.expect(jsonData.address.geo.lat).to.eql(expectedResponse.address.geo.lat);\r",
											"    pm.expect(jsonData.address.geo.lng).to.eql(expectedResponse.address.geo.lng);\r",
											"    pm.expect(jsonData.phone).to.eql(expectedResponse.phone);\r",
											"    pm.expect(jsonData.website).to.eql(expectedResponse.website);\r",
											"    pm.expect(jsonData.company.name).to.eql(expectedResponse.company.name);\r",
											"    pm.expect(jsonData.company.bs).to.eql(expectedResponse.company.bs);\r",
											"    pm.expect(jsonData.company.catchPhrase).to.eql(expectedResponse.company.catchPhrase);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"New Name\",\r\n    \"username\": \"Grola\",\r\n    \"email\": \"Sifvcq@adsril.bds\",\r\n    \"address\": {\r\n        \"street\": \"Long Aw\",\r\n        \"suite\": \"Apt. 6\",\r\n        \"city\": \"faxcugh\",\r\n        \"zipcode\": \"9328-4332\",\r\n        \"geo\": {\r\n            \"lat\": \"-37.1159\",\r\n            \"lng\": \"81.1233\"\r\n        }\r\n    },\r\n    \"phone\": \"1-770-736-321 x56321\",\r\n    \"website\": \"hidwsx.org\",\r\n    \"company\": {\r\n        \"name\": \"Rxa.ca\",\r\n        \"catchPhrase\": \"Multi-layedsdsa ent-server neural-net\",\r\n        \"bs\": \"harnesdae e-markets\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Users}}/1",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PatchUserAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check patched object property value\", function () {\r",
											"    const expectedObject = {\r",
											"        \"street\": \"Aristotelous \",\r",
											"        \"suite\": \"Apt. 3\",\r",
											"        \"city\": \"Thessaloniki\",\r",
											"        \"zipcode\": \"000-00\",\r",
											"        \"geo\": {\r",
											"            \"lat\": \"-37.3159\",\r",
											"            \"lng\": \"81.1496\"\r",
											"        }\r",
											"    }\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.address).to.eql(expectedObject);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": {\r\n        \"street\": \"Aristotelous \",\r\n        \"suite\": \"Apt. 3\",\r\n        \"city\": \"Thessaloniki\",\r\n        \"zipcode\": \"000-00\",\r\n        \"geo\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"lng\": \"81.1496\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Users}}/1",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DeleteFirstUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"  type: \"object\"\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"pm.test(\"Check Response Object \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}/1",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GetAllUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 10;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}",
									"host": [
										"{{BaseURL}}{{Users}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetFirstUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseType = 'object';\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(expectedResponseType).to.eql(typeof(jsonData));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}/1",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}?id=1",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}?name=Leanne Graham",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"query": [
										{
											"key": "name",
											"value": "Leanne Graham"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}?username=Bret",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"query": [
										{
											"key": "username",
											"value": "Bret"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByEmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}?email=Sincere@april.biz",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"query": [
										{
											"key": "email",
											"value": "Sincere@april.biz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByPhone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}?phone=1-770-736-8031 x56442",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"query": [
										{
											"key": "phone",
											"value": "1-770-736-8031 x56442"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByWebsite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}?website=hildegard.org",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"query": [
										{
											"key": "website",
											"value": "hildegard.org"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByCompanyName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      id: { type: \"integer\" },\r",
											"      name: { type: \"string\" },\r",
											"      username: { type: \"string\" },\r",
											"      email: { type: \"string\" },\r",
											"      address: {\r",
											"        street: {type: \"string\"},\r",
											"        asuite: {type: \"string\"},\r",
											"        city: {type: \"string\"},\r",
											"        zipcode: {type: \"string\"},\r",
											"    geo: {\r",
											"        lat: {type: \"string\"},\r",
											"        lng: {type: \"string\"}\r",
											"    },\r",
											"    },\r",
											"    phone: { type: \"string\" },\r",
											"    website:  { type: \"string\" },\r",
											"    company: {\r",
											"        name: {type: \"string\"},\r",
											"        catchPhhrase: {type: \"string\"},\r",
											"        bs: {type: \"string\"}\r",
											"    }\r",
											"    },\r",
											"    required: [\"name\", \"username\", \"email\", \"address\",\"phone\",\"website\",\"company\",\"id\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(responseJson);\r",
											"\r",
											"pm.test(\"Check response schema is valid\", function() {\r",
											"  pm.expect(valid).to.be.true;\r",
											"\r",
											"  if (!valid) {\r",
											"    console.log(validate.errors); // Log validation errors if schema is invalid\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Check response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check response status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Check response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"pm.test(\"Check request headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Check count of total response objects\", function () {\r",
											"    const expectedResponseObjects = 1;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(expectedResponseObjects);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Users}}?company.name=Deckow-Crist",
									"host": [
										"{{BaseURL}}{{Users}}"
									],
									"query": [
										{
											"key": "company.name",
											"value": "Deckow-Crist"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}